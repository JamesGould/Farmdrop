package techtest.farmdrop.util;

import java.net.MalformedURLException;
import java.net.URL;
import java.util.concurrent.TimeUnit;

import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

import techtest.farmdrop.constants.Constants;

import org.openqa.selenium.Capabilities;
import org.openqa.selenium.WebElement;
import io.appium.java_client.AppiumDriver;
import io.appium.java_client.ios.IOSDriver;
import io.appium.java_client.ios.IOSElement;

public class AppiumUtil extends Constants {

    public static AppiumDriver driver;
    public final static int IMPLICIT_TIME_SECONDS = 30;
    
    public void init()
    {
    	DesiredCapabilities caps = DesiredCapabilities.iphone();
    }
    
	public static void startApp() throws MalformedURLException {
		driver=new IOSDriver(new URL("http://0.0.0.0:4723/wd/hub"), getDesiredCapabilitiesForIOS());
	}

	private static Capabilities getDesiredCapabilitiesForIOS() {
		
		DesiredCapabilities caps = DesiredCapabilities.iphone();
		caps.setCapability("deviceName", DEVICE_NAME);
		caps.setCapability("platformVersion", PLATFORM_VERSION);
		caps.setCapability("browserName", BROWSER_NAME);
		caps.setCapability("platformName", PLATFORM_NAME);
		caps.setCapability("app", APP_PATH);
//		caps.setCapability("bundleId", BUNDLE_ID);
//		caps.setCapability("processArguments", "-testing");
//		caps.setCapability("udid", UDID_ID);
		caps.setCapability("fullReset", true);
//		caps.setCapability("automationName", "XCUITest");
		
		return caps;
	}

	public static Boolean checkElementDisplayed(IOSElement element)
    {
    driver.manage().timeouts().implicitlyWait(0, TimeUnit.SECONDS);
        try 
        {
        	Boolean b = element.isDisplayed();
        	driver.manage().timeouts().implicitlyWait(IMPLICIT_TIME_SECONDS, TimeUnit.SECONDS);
        	return b;
        } 
        catch (Exception e) 
        {
        	driver.manage().timeouts().implicitlyWait(IMPLICIT_TIME_SECONDS, TimeUnit.SECONDS);
        	return false;
        }        
    }
	
	public static IOSElement waitUntillTappable(IOSElement element)
	{
		 WebDriverWait wait = new WebDriverWait(driver, 20);
		 wait.until(ExpectedConditions.elementToBeClickable(element));
		 return element;
	}

	public static WebElement waitUntillClickable(WebElement element)
	{
		 WebDriverWait wait = new WebDriverWait(driver, 20);
		 wait.until(ExpectedConditions.elementToBeClickable(element));
		 return element;
	}
	
	public static void tap_button(IOSElement region) {
		waitUntillTappable(region);
		driver.tap(1, region, 1);
	}
	
	public static Boolean selectedState(IOSElement region) {
		return region.isSelected();
	}

	public Boolean isObjectDisplayed(IOSElement topic) {
		return topic.isDisplayed();		
	}

	public Boolean topic_selector(String topic) {
		
		switch (topic) {
		case "ALL":
			return checkElementDisplayed(alltopiclist);
		case "NEWS":
			return checkElementDisplayed(newstopiclist);
		case "SPORT":
			return checkElementDisplayed(sporttopiclist);
		case "TECH":
			return checkElementDisplayed(techtopiclist);
		case "ENTERTAINMENT":
			return checkElementDisplayed(entertainmenttopiclist);
		case "BUSINESS":
			return checkElementDisplayed(businesstopiclist);
		case "POLITICS":
			return checkElementDisplayed(politicstopiclist);
		case "HEALTH":
			return checkElementDisplayed(healthtopiclist);
		}
		return false;
		
	}
	
	public void swipe_in_direction(String swipedirection) throws InterruptedException{
		
		int screenheight = (driver.manage().window().getSize().getHeight());
		int screenwidth = (driver.manage().window().getSize().getWidth());
		
	    int leftscreenedge = (int) (screenwidth*0.1);
	    int centralwidth = (int) (screenwidth*0.5);
	    int rightscreenedge = (int) (screenwidth*0.9);
	    
	    int topscreenedge = (int) (screenheight*0.1);
	    int centralheight = (int) (screenheight*0.5);
	    int bottomscreenedge = (int) (screenheight*0.9);
	    
		switch (swipedirection) {
		case "UP":
			driver.swipe(centralwidth, centralheight, centralwidth, topscreenedge, 1000);
			Thread.sleep(3000);
			break;
		case "DOWN":
			driver.swipe(centralwidth, centralheight, centralwidth, bottomscreenedge, 1000);
			Thread.sleep(3000);
			break;
		case "RIGHT":
			driver.swipe(leftscreenedge, bottomscreenedge, rightscreenedge, bottomscreenedge, 1000);
			Thread.sleep(3000);
			break;
		case "LEFT":
			driver.swipe(rightscreenedge, bottomscreenedge, leftscreenedge, bottomscreenedge, 1000);
			Thread.sleep(3000);
			break;
		}
		
	}
	
	public Boolean article_list(String regionname) {
		
		switch (regionname) {
		case "UK":
			return checkElementDisplayed(ukarticlelist);
		case "US":
			return checkElementDisplayed(usarticlelist);
		}
		return false;
	}
	
	public Boolean swipe_until(String SwipeDirection, IOSElement UntilElement) throws InterruptedException
	{
		if (isObjectDisplayed(UntilElement) == true)
		{
			return true;
		}
		else
		{
			swipe_in_direction(SwipeDirection);
		}
		
		return null;
	}
	
}